 /*
    public static void main(String[] args) {

        Map<String, LocalDateTime> zipOne=new HashMap<>();
        Map<String, LocalDateTime> zipTwo=new HashMap<>();
        Map<String,Long> z=new HashMap<>();
        BufferedReader bufferedReader=new BufferedReader(new InputStreamReader(System.in));
        try {
            System.out.println("Input your directory zip1: ");
            String pathOne = bufferedReader.readLine();
            System.out.println("Input your directory zip2: ");
            String pathTwo=bufferedReader.readLine();

        //          WORK WITH ZIPS
        //ZipInputStream zip1=new ZipInputStream(new FileInputStream(pathOne));
        //ZipInputStream zip2=new ZipInputStream(new FileInputStream(pathTwo));
            ZipFile zipFile1=new ZipFile(pathOne);
            ZipFile zipFile2=new ZipFile(pathTwo);
            for (Enumeration<? extends  ZipEntry> iter=zipFile1.entries();iter.hasMoreElements();){
                ZipEntry zipElement=iter.nextElement();
                zipOne.put(zipElement.getName(),zipElement.getTimeLocal());
            }
            for (Enumeration<? extends  ZipEntry> iter=zipFile2.entries();iter.hasMoreElements();){
                ZipEntry zipElement=iter.nextElement();
                zipTwo.put(zipElement.getName(),zipElement.getTimeLocal());
                z.put(zipElement.getName(),zipElement.getSize());

            }


            for (Map.Entry<String,Long> pair:z.entrySet()
                 ) {
                System.out.println(pair.getKey()+" "+pair.getValue());
            }


            zipFile1.close();
        }catch (FileNotFoundException ex){

        }catch (IOException ex){

        }
    }


     */



     _________________________________

     мэйн:

     /*
             Archive archive = new Archive();
             ArrayList<File> file = archive.getFile();
             for (File f : file
             ) {
                 System.out.println(f.getAbsoluteFile());
             }
              */
             /*
             Archive archive = new Archive();
             ArrayList<File> file = archive.getFile();
             Map<String, Long> mmm1 = archive.addMap(file.get(0));
             Map<String, Long> mmm2 = archive.addMap(file.get(1));
             archive.compareAndAddToChangesTxt(mmm1, mmm2);
             for (String s : archive.changesFirstZip
             ) {
                 System.out.println(s);
             }

              */

              _____________________________
               public void compareAndAddToChangesTxt(Map<String, Long> mapOne, Map<String, Long> mapTwo) {
                      for (Map.Entry<String, Long> pair : mapOne.entrySet()
                      ) {
                          for (Map.Entry<String, Long> pair1 : mapTwo.entrySet()
                          ) {
                              if (pair.getKey().equals(pair1.getKey()) && !pair.getValue().equals(pair1.getValue())) {
                                  changesFirstZip.add("* update " + pair.getKey());
                                  changesSecondZip.add("* update " + pair1.getKey());
                              }
                              if (!pair.getKey().equals(pair1.getKey()) && pair.getValue().equals(pair1.getValue())) {
                                  changesFirstZip.add("? rename " + pair.getKey());
                                  changesSecondZip.add("? rename " + pair1.getKey());
                              }
                          }
                      }
                      ArrayList<String> m1 = new ArrayList<>();
                      ArrayList<String> m2 = new ArrayList<>();
                      String[] mOne = new String[mapOne.size()];
                      String[] mTwo = new String[mapTwo.size()];

                      for (Map.Entry<String, Long> pair : mapOne.entrySet()
                      ) {
                          m1.add(pair.getKey());
                          for (int i = 0; i < mOne.length; i++) {
                              mOne[i] = pair.getKey();
                          }
                      }
                      for (Map.Entry<String, Long> pair1 : mapTwo.entrySet()
                      ) {
                          m2.add(pair1.getKey());
                          for (int i = 0; i < mTwo.length; i++) {
                              mTwo[i] = pair1.getKey();
                          }
                      }

                      if (mapOne.size() < mapTwo.size()) {
                          boolean b = false;
                          for (int i = 0; i < m2.size(); i++) {
                              for (int j = 0; j < m1.size(); j++) {
                                  if (m2.get(i).equals(m1.get(j))) {
                                      b = true;
                                  }
                              }
                              if (!b) {
                                  changesFirstZip.add("- remove " + m1.get(i));
                                  changesSecondZip.add("+ addNew " + m1.get(i));
                              }
                          }
                      } else {
                          boolean b = false;
                          for (int i = 0; i < m1.size(); i++) {
                              for (int j = 0; j < m2.size(); j++) {
                                  if (m1.get(i).equals(m2.get(j))) {
                                      b = true;
                                  }
                              }
                              if (!b) {
                                  changesFirstZip.add("+ addNew " + m1.get(i));
                                  changesSecondZip.add("- remove " + m1.get(i));
                              }
                          }
                      }
                  }
____________________________________________________________________________________________________________
public void compareAndAddToChangesTxt(Map<String, Long> mapOne, Map<String, Long> mapTwo) {
        for (Map.Entry<String, Long> pair : mapOne.entrySet()
        ) {
            for (Map.Entry<String, Long> pair1 : mapTwo.entrySet()
            ) {
                if (pair.getKey().equals(pair1.getKey()) && !pair.getValue().equals(pair1.getValue())) {
                    changesFirstZip.add("* update " + pair.getKey());
                    changesSecondZip.add("* update " + pair1.getKey());
                }
                if (!pair.getKey().equals(pair1.getKey()) && pair.getValue().equals(pair1.getValue())) {
                    changesFirstZip.add("? rename " + pair.getKey());
                    changesSecondZip.add("? rename " + pair1.getKey());
                }
            }
        }
        ArrayList<String> m1 = new ArrayList<>();
        ArrayList<String> m2 = new ArrayList<>();
        for (Map.Entry<String, Long> pair : mapOne.entrySet()
        ) {
            m1.add(pair.getKey());
        }
        for (Map.Entry<String, Long> pair1 : mapTwo.entrySet()
        ) {
            m2.add(pair1.getKey());
        }

        if (mapOne.size() < mapTwo.size()) {
            boolean b = false;
            for (int i = 0; i < m2.size(); i++) {
                for (int j = 0; j < m1.size(); j++) {
                    if (m2.get(i).equals(m1.get(j))) {
                        //b = true;
                        break;
                    }
                }
                if (!b) {
                    //for (int j = 0; j < mapTwo.size(); j++) {
                    //    for (int k = 0; k < changesFirstZip.size(); k++) {
                    //boolean b1=false;
                    if (changesFirstZip.size() != 0) {
                        for (int j = 0; j < changesFirstZip.size(); j++) {

                            if (m2.get(i).equals(changesFirstZip.get(j))) {
                                continue;
                            }
                            changesFirstZip.add("- remove " + m2.get(i));
                            changesSecondZip.add("+ addNew " + m2.get(i));
                            // }
                        }
                    } else {

                        changesFirstZip.add("- remove " + m2.get(i));
                        changesSecondZip.add("+ addNew " + m2.get(i));
                    }
                }
                //}

            }
        } else {
            boolean b = false;
            for (int i = 0; i < m1.size(); i++) {
                for (int j = 0; j < m2.size(); j++) {
                    if (m1.get(i).equals(m2.get(j))) {
                        b = true;
                    }
                }
                if (!b) {
                   // for (int j = 0; j < mapOne.size(); j++) {
                     //   for (int k = 0; k < changesFirstZip.size(); k++) {
                            if (!m1.get(i).equals(changesFirstZip.get(i))) {
                                changesFirstZip.add("+ addNew " + m1.get(i));
                                changesSecondZip.add("- remove " + m1.get(i));
                            }
                     //   }
                        //changesFirstZip.add("+ addNew " + m1.get(i));
                        //changesSecondZip.add("- remove " + m1.get(i));
                 //   }
                }
            }
        }
    }
___________________________________________________________________________________________
package archiveComparator;

import javax.swing.*;
import javax.swing.filechooser.FileNameExtensionFilter;
import java.io.*;
import java.util.*;
import java.util.zip.ZipEntry;
import java.util.zip.ZipFile;


public class Archive {
    ArrayList<File> fileList = new ArrayList<>(2);
    ArrayList<String> changesFirstZip = new ArrayList<>();
    ArrayList<String> changesSecondZip = new ArrayList<>();

    public Archive() {
        for (int i = 0; i < 2; i++) {
            fileList.add(new File("-1"));
        }
    }

    public ArrayList<File> getFile() {
        JFileChooser jFileChooser = new JFileChooser();
        jFileChooser.setAcceptAllFileFilterUsed(false);
        FileNameExtensionFilter filter = new FileNameExtensionFilter(
                ".zip", "zip");
        jFileChooser.setFileFilter(filter);
        int count = 0;
        while (count < 2) {
            int ret = jFileChooser.showDialog(null, "Open zip" + (count + 1));
            if (ret == JFileChooser.APPROVE_OPTION) {
                fileList.remove(count);
                fileList.add(count, jFileChooser.getSelectedFile());
            }
            count++;
        }
        for (int i = 0; i < fileList.size(); i++) {
            if (fileList.get(i).getName().equals("-1")) {
                throw new NoSuchElementException("Не был введен путь одного из архивов.");
            }
        }
        return fileList;
    }


    public Map<String, Long> addMap(File file) {
        Map<String, Long> tempMap = new HashMap<>();
        try {
            ZipFile zip = new ZipFile(file.getAbsolutePath());
            for (Enumeration<? extends ZipEntry> iter = zip.entries(); iter.hasMoreElements(); ) {
                ZipEntry zipElement = iter.nextElement();
                tempMap.put(zipElement.getName(), zipElement.getSize());
            }
        } catch (IOException ex) {
            ex.getStackTrace();
        }
        return tempMap;
    }

    public void compareAndAddToChangesTxt(Map<String, Long> mapOne, Map<String, Long> mapTwo) {
        try (BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter("changes.txt"))) {
            bufferedWriter.write("Archive 1" + "\t\t\t\t\t" + "Archive 2\n");

            for (Map.Entry<String, Long> pair : mapOne.entrySet()
            ) {
                for (Map.Entry<String, Long> pair1 : mapTwo.entrySet()
                ) {
                    if (pair.getKey().equals(pair1.getKey()) && !pair.getValue().equals(pair1.getValue())) {
                        changesFirstZip.add("* update " + pair.getKey());
                        changesSecondZip.add("* update " + pair1.getKey());
                        bufferedWriter.write("* update " + pair.getKey() + "\t\t\t" + "* update " + pair1.getKey() + "\n");
                    }
                    if (!pair.getKey().equals(pair1.getKey()) && pair.getValue().equals(pair1.getValue())) {
                        changesFirstZip.add("? rename " + pair.getKey());
                        changesSecondZip.add("? rename " + pair1.getKey());
                        bufferedWriter.write("? rename " + pair.getKey() + "\t\t\t" + "? rename " + pair1.getKey() + "\n");

                    }
                }
            }
            ArrayList<String> m1 = new ArrayList<>();
            ArrayList<String> m2 = new ArrayList<>();
            for (Map.Entry<String, Long> pair : mapOne.entrySet()
            ) {
                m1.add(pair.getKey());
            }
            for (Map.Entry<String, Long> pair1 : mapTwo.entrySet()
            ) {
                m2.add(pair1.getKey());
            }
            ArrayList<String> allChanges = new ArrayList<>();
            for (int j = 0; j < changesFirstZip.size(); j++) {
                allChanges.add(changesFirstZip.get(j));
            }
            for (int j = 0; j < changesSecondZip.size(); j++) {
                allChanges.add(changesSecondZip.get(j));
            }
            if (m2.size() > m1.size()) {
                for (int i = 0; i < m2.size(); i++) {
                    for (int j = 0; j < m1.size(); j++) {
                        if (m2.get(i).equals(m1.get(j))) {
                            break;
                        }
                    }
                    boolean b=false;
                    for (int j = 0; j < allChanges.size(); j++) {
                        if (allChanges.get(j).endsWith(m2.get(i))) {
                            b=true;
                           // continue;
                        }
                    }
                    if(!b){
                        bufferedWriter.write("- remove " + m2.get(i) + "\t\t\t" + "+ addNew " + m2.get(i) + "\n");
                    }
                }
            } else {

                for (int i = 0; i < m1.size(); i++) {
                    for (int j = 0; j < m2.size(); j++) {
                        if (m1.get(i).equals(m2.get(j))) {
                            //b = true;
                            break;
                        }
                    }
                    boolean b=false;
                    for (int j = 0; j < allChanges.size(); j++) {
                        if (allChanges.get(j).endsWith(m1.get(i))) {
                            b=true;
                           // continue;
                        }
                    }
                    if(!b)
                        bufferedWriter.write("+ addNew " + m1.get(i) + "\t\t\t" + "- remove " + m1.get(i) + "\n");
                }
            }
            //if (!b) {
            //for (int j = 0; j < mapTwo.size(); j++) {
            //    for (int k = 0; k < changesFirstZip.size(); k++) {
            //boolean b1=false;
                    /*
                    if (changesFirstZip.size() != 0) {
                        for (int j = 0; j < changesFirstZip.size(); j++) {




                            if (m2.get(i).equals(changesFirstZip.get(i))) {
                                continue;
                            }
                            changesFirstZip.add("- remove " + m2.get(i));
                            changesSecondZip.add("+ addNew " + m2.get(i));
                            // }
                        }
                    }else {

                        changesFirstZip.add("- remove " + m2.get(i));
                        changesSecondZip.add("+ addNew " + m2.get(i));
                    }
                }

                */
            //}

            //}

        } catch (IOException e) {

        }

    }



    _______________________________________________________________________________________________
    package archiveComparator;

    import javax.swing.*;
    import javax.swing.filechooser.FileNameExtensionFilter;
    import java.io.*;
    import java.util.*;
    import java.util.zip.ZipEntry;
    import java.util.zip.ZipFile;


    public class Archive {
        ArrayList<File> fileList = new ArrayList<>(2);
        ArrayList<String> changesFirstZip = new ArrayList<>();
        ArrayList<String> changesSecondZip = new ArrayList<>();


        public Archive() {
           initFileList();
        }
        public  Archive(String pathOne,String pathTwo){
            initFileList();
            if(pathOne==null || pathTwo==null){
                throw new IllegalStateException();
            }
            fileList.add(new File(pathOne));
            fileList.add(new File(pathTwo));
            Map<String, Long> mmm1 = addMap(fileList.get(0));
            Map<String, Long> mmm2 = addMap(fileList.get(1));
            compareAndAddToChangesTxt(mmm1, mmm2);

        }

        public void initFileList(){
            for (int i = 0; i < 2; i++) {
                fileList.add(new File("-1"));
            }
        }
        public ArrayList<File> getFile() {
            JFileChooser jFileChooser = new JFileChooser();
            jFileChooser.setAcceptAllFileFilterUsed(false);
            FileNameExtensionFilter filter = new FileNameExtensionFilter(
                    ".zip", "zip");
            jFileChooser.setFileFilter(filter);
            int count = 0;
            while (count < 2) {
                int ret = jFileChooser.showDialog(null, "Open zip" + (count + 1));
                if (ret == JFileChooser.APPROVE_OPTION) {
                    fileList.remove(count);
                    fileList.add(count, jFileChooser.getSelectedFile());
                }
                count++;
            }
            for (int i = 0; i < fileList.size(); i++) {
                if (fileList.get(i).getName().equals("-1")) {
                    throw new NoSuchElementException("Не был введен путь одного из архивов.");
                }
            }
            return fileList;
        }


        public Map<String, Long> addMap(File file) {
            Map<String, Long> tempMap = new HashMap<>();
            try {
                ZipFile zip = new ZipFile(file.getAbsolutePath());
                for (Enumeration<? extends ZipEntry> iter = zip.entries(); iter.hasMoreElements(); ) {
                    ZipEntry zipElement = iter.nextElement();
                    tempMap.put(zipElement.getName(), zipElement.getSize());
                }
            } catch (IOException ex) {
                ex.getStackTrace();
            }
            return tempMap;
        }

        public void compareAndAddToChangesTxt(Map<String, Long> mapOne, Map<String, Long> mapTwo) {
            try (BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter("changes.txt"))) {
                bufferedWriter.write("Archive 1" + "\t\t\t\t\t" + "Archive 2\n");

                for (Map.Entry<String, Long> pair : mapOne.entrySet()
                ) {
                    for (Map.Entry<String, Long> pair1 : mapTwo.entrySet()
                    ) {
                        if (pair.getKey().equals(pair1.getKey()) && !pair.getValue().equals(pair1.getValue())) {
                            changesFirstZip.add("* update " + pair.getKey());
                            changesSecondZip.add("* update " + pair1.getKey());
                            bufferedWriter.write("* update " + pair.getKey() + "\t\t\t" + "* update " + pair1.getKey() + "\n");
                        }
                        if (!pair.getKey().equals(pair1.getKey()) && pair.getValue().equals(pair1.getValue())) {
                            changesFirstZip.add("? rename " + pair.getKey());
                            changesSecondZip.add("? rename " + pair1.getKey());
                            bufferedWriter.write("? rename " + pair.getKey() + "\t\t\t" + "? rename " + pair1.getKey() + "\n");

                        }
                    }
                }
                ArrayList<String> m1 = new ArrayList<>();
                ArrayList<String> m2 = new ArrayList<>();
                for (Map.Entry<String, Long> pair : mapOne.entrySet()
                ) {
                    m1.add(pair.getKey());
                }
                for (Map.Entry<String, Long> pair1 : mapTwo.entrySet()
                ) {
                    m2.add(pair1.getKey());
                }
                ArrayList<String> allChanges = new ArrayList<>();
                for (int j = 0; j < changesFirstZip.size(); j++) {
                    allChanges.add(changesFirstZip.get(j));
                }
                for (int j = 0; j < changesSecondZip.size(); j++) {
                    allChanges.add(changesSecondZip.get(j));
                }
                if (m2.size() > m1.size()) {
                    for (int i = 0; i < m2.size(); i++) {
                        for (int j = 0; j < m1.size(); j++) {
                            if (m2.get(i).equals(m1.get(j))) {
                                break;
                            }
                        }
                        boolean b=false;
                        for (int j = 0; j < allChanges.size(); j++) {
                            if (allChanges.get(j).endsWith(m2.get(i))) {
                                b=true;
                               // continue;
                            }
                        }
                        if(!b){
                            bufferedWriter.write("- remove " + m2.get(i) + "\t\t\t" + "+ addNew " + m2.get(i) + "\n");
                        }
                    }
                }

                if(m2.size()<m1.size()){
                    for (int i = 0; i < m1.size(); i++) {
                        for (int j = 0; j < m2.size(); j++) {
                            if (m1.get(i).equals(m2.get(j))) {
                                //b = true;
                                break;
                            }
                        }
                        boolean b=false;
                        for (int j = 0; j < allChanges.size(); j++) {
                            if (allChanges.get(j).endsWith(m1.get(i))) {
                                b=true;
                               // continue;
                            }
                        }
                        if(!b)
                            bufferedWriter.write("+ addNew " + m1.get(i) + "\t\t\t" + "- remove " + m1.get(i) + "\n");
                    }
                }
                //if (!b) {
                //for (int j = 0; j < mapTwo.size(); j++) {
                //    for (int k = 0; k < changesFirstZip.size(); k++) {
                //boolean b1=false;
                        /*
                        if (changesFirstZip.size() != 0) {
                            for (int j = 0; j < changesFirstZip.size(); j++) {




                                if (m2.get(i).equals(changesFirstZip.get(i))) {
                                    continue;
                                }
                                changesFirstZip.add("- remove " + m2.get(i));
                                changesSecondZip.add("+ addNew " + m2.get(i));
                                // }
                            }
                        }else {

                            changesFirstZip.add("- remove " + m2.get(i));
                            changesSecondZip.add("+ addNew " + m2.get(i));
                        }
                    }

                    */
                //}

                //}

            } catch (IOException e) {

            }

        }


        public static void readyToLaunch() {
            Archive archive = new Archive();
            ArrayList<File> file = archive.getFile();
            Map<String, Long> mmm1 = archive.addMap(file.get(0));
            Map<String, Long> mmm2 = archive.addMap(file.get(1));
            archive.compareAndAddToChangesTxt(mmm1, mmm2);
            /*
            for (String s : archive.changesFirstZip
            ) {
                System.out.println(s);
            }

             */
        }


        public static void main(String[] args) {
            Archive.readyToLaunch();
        }
    }
